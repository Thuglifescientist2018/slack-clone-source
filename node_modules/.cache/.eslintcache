[{"D:\\react-challenge-slack-clone\\src\\index.js":"1","D:\\react-challenge-slack-clone\\src\\App.js":"2","D:\\react-challenge-slack-clone\\src\\reportWebVitals.js":"3","D:\\react-challenge-slack-clone\\src\\firebase.js":"4","D:\\react-challenge-slack-clone\\src\\components\\Login.js":"5","D:\\react-challenge-slack-clone\\src\\components\\Header.js":"6","D:\\react-challenge-slack-clone\\src\\components\\Chat.js":"7","D:\\react-challenge-slack-clone\\src\\components\\Sidebar.js":"8","D:\\react-challenge-slack-clone\\src\\components\\ChatInput.js":"9","D:\\react-challenge-slack-clone\\src\\components\\ChatMessage.js":"10","D:\\react-challenge-slack-clone\\src\\data\\SidebarData.js":"11"},{"size":565,"mtime":1614256828877,"results":"12","hashOfConfig":"13"},{"size":2477,"mtime":1614343090147,"results":"14","hashOfConfig":"13"},{"size":375,"mtime":1614221331238,"results":"15","hashOfConfig":"13"},{"size":624,"mtime":1614308041315,"results":"16","hashOfConfig":"13"},{"size":2426,"mtime":1614344641833,"results":"17","hashOfConfig":"13"},{"size":2220,"mtime":1614342324930,"results":"18","hashOfConfig":"13"},{"size":3840,"mtime":1614339233179,"results":"19","hashOfConfig":"13"},{"size":4059,"mtime":1614326256006,"results":"20","hashOfConfig":"13"},{"size":3788,"mtime":1614335805173,"results":"21","hashOfConfig":"13"},{"size":1651,"mtime":1614330906184,"results":"22","hashOfConfig":"13"},{"size":820,"mtime":1614221331235,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nihm0t",{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\react-challenge-slack-clone\\src\\index.js",[],"D:\\react-challenge-slack-clone\\src\\App.js",["48"],"D:\\react-challenge-slack-clone\\src\\reportWebVitals.js",[],"D:\\react-challenge-slack-clone\\src\\firebase.js",[],"D:\\react-challenge-slack-clone\\src\\components\\Login.js",["49","50"],"D:\\react-challenge-slack-clone\\src\\components\\Header.js",[],"D:\\react-challenge-slack-clone\\src\\components\\Chat.js",["51"],"import React, {useEffect, useState} from 'react'\r\nimport styled from 'styled-components'\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\nimport ChatInput from './ChatInput'\r\nimport ChatMessage from './ChatMessage';\r\nimport db from '../firebase';\r\nimport { useParams } from 'react-router-dom';\r\nimport firebase from 'firebase';\r\n\r\n\r\nfunction Chat({user}) {\r\n    let {channelId} = useParams();\r\n    const [channel, setChannel] = useState({name: \"youtube\"});\r\n    const [ messages, setMessages ] = useState([]);\r\n\r\n    const getMessages = () =>  {\r\n        db.collection(\"rooms\")\r\n        .doc(channelId)\r\n        .collection(\"messages\")\r\n        .orderBy('timestamp', 'asc')\r\n        .onSnapshot((snapshot) => {\r\n            let messages = snapshot.docs.map((doc)=>doc.data());\r\n            console.log(messages);\r\n            setMessages(messages);\r\n        })\r\n    }\r\n\r\n    const sendMessage =  (text) => { \r\n        if(channelId) {\r\n            let payload = {\r\n                text: text,\r\n                timestamp: firebase.firestore.Timestamp.now(),\r\n                user: user.name,\r\n                userImage: user.photo\r\n            }\r\n            db.collection(\"rooms\").doc(channelId).collection(\"messages\").add(payload);\r\n            console.log(payload)\r\n        }\r\n    }\r\n    const getChannel = () => {\r\n        db.collection('rooms')\r\n        .doc(channelId)\r\n        .onSnapshot((snapshot) => {\r\n           setChannel(snapshot.data()); \r\n           \r\n        })\r\n\r\n    }\r\n\r\nuseEffect(() => {\r\n    getChannel();\r\n    getMessages();\r\n    \r\n\r\n    \r\n}, [channelId]);\r\n    return (\r\n            <Container>\r\n                <Header id=\"chat-header\">\r\n                    \r\n                    <Channel>\r\n                        <ChannelName>\r\n                        {channel.name}\r\n                        </ChannelName>\r\n                        <ChannelInfo>\r\n                            Where Creativity and Divergent Thinking Matters\r\n                        </ChannelInfo>\r\n                    </Channel>\r\n                <ChannelDetails>\r\n                <div>\r\n                        Details\r\n                    </div>\r\n                    <Info />\r\n                </ChannelDetails>\r\n                </Header>\r\n                <MessageContainer id=\"chat-messages\">\r\n                        {messages.map((data) => (\r\n                            <ChatMessage \r\n                            text={data.text}\r\n                            name={data.user}\r\n                            image={data.userImage}\r\n                            timestamp={data.timestamp}\r\n                            />\r\n                            \r\n                        ))}\r\n                </MessageContainer>\r\n                <ChatInput id=\"chatInputs\" sendMessage={sendMessage}/>\r\n            </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default Chat;\r\n\r\nconst Container = styled.div`\r\nbackground: url('https://source.unsplash.com/in9-n0JwgZ0/1920x1080') no-repeat center center/cover;\r\n    display: grid;\r\n    grid-template-rows: 64px auto min-content;\r\n    min-height: 0;\r\n`\r\n\r\nconst Channel = styled.div``\r\n\r\nconst ChannelDetails = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    color: #606060;\r\n`\r\n\r\nconst ChannelName = styled.div`\r\n    font-weight: 700;\r\n`\r\n\r\nconst ChannelInfo = styled.div`\r\n    font-weight: 400;\r\n    color: #606060;\r\n    font-size: 13px;\r\n    margin-top: 8px;\r\n    color: #ddd;\r\n`\r\n\r\nconst Info = styled(InfoOutlinedIcon)`\r\n    margin-left: 10px;\r\n`\r\n\r\nconst Header = styled.div`\r\n    padding-left: 20px;\r\n    padding-right: 20px;\r\n    display: flex;\r\n    align-items: center;\r\n    border-bottom: 1px solid rgba(83, 39, 83,0.3);\r\n    justify-content: space-between;\r\n    color: #ddd;\r\n`\r\n\r\nconst MessageContainer = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\noverflow-y: scroll;\r\n`\r\n","D:\\react-challenge-slack-clone\\src\\components\\Sidebar.js",[],"D:\\react-challenge-slack-clone\\src\\components\\ChatInput.js",["52"],"import React, {useState} from 'react';\r\nimport styled from 'styled-components';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport FormatBoldIcon from '@material-ui/icons/FormatBold';\r\nimport FormatItalicTwoToneIcon from '@material-ui/icons/FormatItalicTwoTone';\r\nimport StrikethroughSTwoToneIcon from '@material-ui/icons/StrikethroughSTwoTone';\r\nimport CodeIcon from '@material-ui/icons/Code';\r\nimport LinkIcon from '@material-ui/icons/Link';\r\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\r\nimport FontDownloadIcon from '@material-ui/icons/FontDownload';\r\nimport AlternateEmailIcon from '@material-ui/icons/AlternateEmail';\r\nimport EmojiEmotionsOutlinedIcon from '@material-ui/icons/EmojiEmotionsOutlined';\r\nimport AttachFileOutlinedIcon from '@material-ui/icons/AttachFileOutlined';\r\nimport {Button} from '@material-ui/core';\r\n\r\nfunction ChatInput({ sendMessage }) {\r\n    const [input, setInput] = useState(\"\");\r\n    const send = (e) => {\r\n        e.preventDefault();\r\n        if(!input) return;\r\n        sendMessage(input)\r\n    }\r\n    return (\r\n        <Container>\r\n            <InputContainer>\r\n                <form>\r\n                    <input onChange={(e) => setInput(e.target.value)} value={input} type=\"text\" placeholder=\"Message here...\"/>\r\n                    <SendButton onClick={send} type=\"submit\">\r\n                        <Send/>\r\n                       \r\n                    </SendButton>\r\n                </form>\r\n                <TextFormat>\r\n                        <Left>\r\n                            <FormatBoldIcon id=\"fBI\"/>\r\n                            <FormatItalicTwoToneIcon id=\"fiI\"/>\r\n                            <StrikethroughSTwoToneIcon id=\"stI\"/>\r\n                            <CodeIcon id=\"cI\"/>\r\n                            <LinkIcon/>\r\n                            <FormatListBulletedIcon/>\r\n                        </Left>\r\n                       \r\n                        <Right>\r\n                            <FontDownloadIcon/>\r\n                            <AlternateEmailIcon/>\r\n                            <EmojiEmotionsOutlinedIcon/>\r\n                            <AttachFileOutlinedIcon/>\r\n                        </Right>\r\n                </TextFormat>\r\n            </InputContainer>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ChatInput\r\n\r\nconst Container = styled.div`\r\n::-webkit-scrollbar-track {\r\n    box-shadow: inset 0 0 5px grey; \r\n    border-radius: 10px;\r\n  }\r\n   \r\n    padding: 0 20px;\r\n    padding-bottom: 24px;\r\n    #lightBtn, darkBtn {\r\n        margin: 0 1rem;\r\n    }\r\n  #darkBtn {\r\n      background: #333;\r\n      color: #f4f4f4\r\n  }\r\n  #lightBtn  {\r\n      background: #f4f4f4;\r\n      color: #333;\r\n  }\r\n   \r\n`;\r\n\r\nconst InputContainer = styled.div`\r\n    border: 1px solid #8D8D8E;\r\n    form {\r\n        display:flex;\r\n        height: 42px;\r\n        align-items: center;\r\n        padding-left: 10px;;\r\n        input {\r\n            flex: 1;\r\n            border: none;\r\n            font-size: 13px;\r\n            background: rgba(0, 0, 0, 0);\r\n            color: #f4f4f4;\r\n            \r\n        }\r\n        input:focus {\r\n            outline:none\r\n        }\r\n    }\r\n`;\r\nconst SendButton = styled.button`\r\nbackground: #007a5a;\r\nborder-radius: 2px;\r\nwidth: 32px;\r\nheight: 32px;\r\ndisplay: flex;\r\nalign-items: center;\r\njustify-content: center;\r\nmargin-right: 5px;\r\ncursor: pointer;\r\nborder: none;\r\n.MuiSvgIcon-root {\r\n    width: 18px;\r\n}\r\n\r\n`;\r\n\r\nconst Send = styled(SendIcon)`\r\n    color: #D9D9D9;\r\n`;\r\n\r\nconst TextFormat = styled.div`\r\nheight: 40px;\r\nborder-top: 1px solid #8D8D8E;\r\ndisplay: flex;\r\njustify-content: space-between;\r\nalign-items: center;\r\n`;\r\n\r\nconst Left = styled.div`\r\n    font-weight: 400;\r\n    color: white;\r\n`;\r\n\r\nconst Right = styled.div`\r\nfont-weight: 400;\r\ncolor: white;\r\n`;","D:\\react-challenge-slack-clone\\src\\components\\ChatMessage.js",[],"D:\\react-challenge-slack-clone\\src\\data\\SidebarData.js",[],{"ruleId":"53","severity":1,"message":"54","line":10,"column":16,"nodeType":"55","messageId":"56","endLine":10,"endColumn":24},{"ruleId":"53","severity":1,"message":"57","line":3,"column":9,"nodeType":"55","messageId":"56","endLine":3,"endColumn":15},{"ruleId":"53","severity":1,"message":"58","line":4,"column":9,"nodeType":"55","messageId":"56","endLine":4,"endColumn":13},{"ruleId":"59","severity":1,"message":"60","line":56,"column":4,"nodeType":"61","endLine":56,"endColumn":15,"suggestions":"62"},{"ruleId":"53","severity":1,"message":"57","line":14,"column":9,"nodeType":"55","messageId":"56","endLine":14,"endColumn":15},"no-unused-vars","'provider' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getChannel' and 'getMessages'. Either include them or remove the dependency array.","ArrayExpression",["63"],{"desc":"64","fix":"65"},"Update the dependencies array to be: [channelId, getChannel, getMessages]",{"range":"66","text":"67"},[1581,1592],"[channelId, getChannel, getMessages]"]