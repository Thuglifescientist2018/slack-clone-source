[{"D:\\react-challenge-slack-clone\\src\\index.js":"1","D:\\react-challenge-slack-clone\\src\\App.js":"2","D:\\react-challenge-slack-clone\\src\\reportWebVitals.js":"3","D:\\react-challenge-slack-clone\\src\\firebase.js":"4","D:\\react-challenge-slack-clone\\src\\components\\Login.js":"5","D:\\react-challenge-slack-clone\\src\\components\\Header.js":"6","D:\\react-challenge-slack-clone\\src\\components\\Chat.js":"7","D:\\react-challenge-slack-clone\\src\\components\\Sidebar.js":"8","D:\\react-challenge-slack-clone\\src\\components\\ChatInput.js":"9","D:\\react-challenge-slack-clone\\src\\components\\ChatMessage.js":"10","D:\\react-challenge-slack-clone\\src\\data\\SidebarData.js":"11","D:\\react-challenge-slack-clone\\src\\components\\DarkMode.js":"12"},{"size":565,"mtime":1614256828877,"results":"13","hashOfConfig":"14"},{"size":1854,"mtime":1614339505544,"results":"15","hashOfConfig":"14"},{"size":375,"mtime":1614221331238,"results":"16","hashOfConfig":"14"},{"size":624,"mtime":1614308041315,"results":"17","hashOfConfig":"14"},{"size":2424,"mtime":1614335565803,"results":"18","hashOfConfig":"14"},{"size":2285,"mtime":1614338482072,"results":"19","hashOfConfig":"14"},{"size":3840,"mtime":1614339233179,"results":"20","hashOfConfig":"14"},{"size":4059,"mtime":1614326256006,"results":"21","hashOfConfig":"14"},{"size":3788,"mtime":1614335805173,"results":"22","hashOfConfig":"14"},{"size":1651,"mtime":1614330906184,"results":"23","hashOfConfig":"14"},{"size":820,"mtime":1614221331235,"results":"24","hashOfConfig":"14"},{"size":513,"mtime":1614338248933,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1cdtsbh",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},"D:\\react-challenge-slack-clone\\src\\index.js",[],["55","56"],"D:\\react-challenge-slack-clone\\src\\App.js",["57"],"D:\\react-challenge-slack-clone\\src\\reportWebVitals.js",[],"D:\\react-challenge-slack-clone\\src\\firebase.js",[],"D:\\react-challenge-slack-clone\\src\\components\\Login.js",["58","59"],"import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {Button} from '@material-ui/core';\r\nimport {Link} from 'react-router-dom';\r\nimport { auth, provider } from  '../firebase';\r\nimport mp3_file from  './numb.mp3';\r\n\r\nfunction Login(props) {\r\n    const  signIn = () => {\r\n        auth.signInWithPopup(provider)\r\n        .then((result) => {\r\n            const newUser = {\r\n                name: result.user.displayName,\r\n                photo: result.user.photoURL,\r\n            }\r\n            localStorage.setItem('user', JSON.stringify(newUser));\r\n            props.setUser(newUser);\r\n        })\r\n        .catch((error) => {\r\n            alert(error.message)\r\n        })\r\n    }\r\n    return (\r\n        <Container>\r\n            <div className=\"container\">\r\n                <Content>\r\n                    <SlackImg src=\"http://assets.stickpng.com/images/5cb480cd5f1b6d3fbadece79.png\"/>\r\n                    <h1>Sign In To Slack</h1>\r\n                    <p>While Listen to this Awesome song</p>\r\n                    <audio src={mp3_file} controls style={{outline: \"none\", opacity: \"0.8\"}}></audio>\r\n                    <SignInButton onClick={()=>signIn()}>\r\n                        Sign In With Google\r\n                    </SignInButton>\r\n                </Content>\r\n                \r\n\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Login\r\n\r\n\r\nconst Container = styled.section`\r\nbackground: url('https://source.unsplash.com/in9-n0JwgZ0/1920x1080') no-repeat center center/cover;\r\ndisplay: flex;\r\njustify-content: center;\r\nalign-items: center;\r\nheight: 100vh;\r\n     .container {\r\n         font-family: 'Advent Pro', sans-serif;\r\n         display: flex; \r\n         justify-content: center;\r\n         align-items: center;\r\n         flex-direction: column;\r\n        background-color: rgba(0, 0, 0, 0.5);\r\n        box-shadow: inset 5px 5px 10px #F8E6F4;\r\n         color: white;\r\n         padding: 1rem 2rem;\r\n         border-radius: 90px;\r\n\r\n     }\r\n\r\n`;\r\nconst Content = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: center; \r\nalign-items: center;\r\n`;\r\nconst SlackImg = styled.img`\r\n     height: 100px;\r\n`;\r\n\r\nconst SignInButton = styled.button`\r\n        margin-top:50px;\r\n        background-color: #0a8d48;\r\n        color: white;\r\n        border: none;\r\n        height: 40px;\r\n        border-radius: 4px;\r\n        cursor: pointer;\r\n        font-size:15px;\r\n`;","D:\\react-challenge-slack-clone\\src\\components\\Header.js",[],"D:\\react-challenge-slack-clone\\src\\components\\Chat.js",["60"],"import React, {useEffect, useState} from 'react'\r\nimport styled from 'styled-components'\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\nimport ChatInput from './ChatInput'\r\nimport ChatMessage from './ChatMessage';\r\nimport db from '../firebase';\r\nimport { useParams } from 'react-router-dom';\r\nimport firebase from 'firebase';\r\n\r\n\r\nfunction Chat({user}) {\r\n    let {channelId} = useParams();\r\n    const [channel, setChannel] = useState({name: \"youtube\"});\r\n    const [ messages, setMessages ] = useState([]);\r\n\r\n    const getMessages = () =>  {\r\n        db.collection(\"rooms\")\r\n        .doc(channelId)\r\n        .collection(\"messages\")\r\n        .orderBy('timestamp', 'asc')\r\n        .onSnapshot((snapshot) => {\r\n            let messages = snapshot.docs.map((doc)=>doc.data());\r\n            console.log(messages);\r\n            setMessages(messages);\r\n        })\r\n    }\r\n\r\n    const sendMessage =  (text) => { \r\n        if(channelId) {\r\n            let payload = {\r\n                text: text,\r\n                timestamp: firebase.firestore.Timestamp.now(),\r\n                user: user.name,\r\n                userImage: user.photo\r\n            }\r\n            db.collection(\"rooms\").doc(channelId).collection(\"messages\").add(payload);\r\n            console.log(payload)\r\n        }\r\n    }\r\n    const getChannel = () => {\r\n        db.collection('rooms')\r\n        .doc(channelId)\r\n        .onSnapshot((snapshot) => {\r\n           setChannel(snapshot.data()); \r\n           \r\n        })\r\n\r\n    }\r\n\r\nuseEffect(() => {\r\n    getChannel();\r\n    getMessages();\r\n    \r\n\r\n    \r\n}, [channelId]);\r\n    return (\r\n            <Container>\r\n                <Header id=\"chat-header\">\r\n                    \r\n                    <Channel>\r\n                        <ChannelName>\r\n                        {channel.name}\r\n                        </ChannelName>\r\n                        <ChannelInfo>\r\n                            Where Creativity and Divergent Thinking Matters\r\n                        </ChannelInfo>\r\n                    </Channel>\r\n                <ChannelDetails>\r\n                <div>\r\n                        Details\r\n                    </div>\r\n                    <Info />\r\n                </ChannelDetails>\r\n                </Header>\r\n                <MessageContainer id=\"chat-messages\">\r\n                        {messages.map((data) => (\r\n                            <ChatMessage \r\n                            text={data.text}\r\n                            name={data.user}\r\n                            image={data.userImage}\r\n                            timestamp={data.timestamp}\r\n                            />\r\n                            \r\n                        ))}\r\n                </MessageContainer>\r\n                <ChatInput id=\"chatInputs\" sendMessage={sendMessage}/>\r\n            </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default Chat;\r\n\r\nconst Container = styled.div`\r\nbackground: url('https://source.unsplash.com/in9-n0JwgZ0/1920x1080') no-repeat center center/cover;\r\n    display: grid;\r\n    grid-template-rows: 64px auto min-content;\r\n    min-height: 0;\r\n`\r\n\r\nconst Channel = styled.div``\r\n\r\nconst ChannelDetails = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    color: #606060;\r\n`\r\n\r\nconst ChannelName = styled.div`\r\n    font-weight: 700;\r\n`\r\n\r\nconst ChannelInfo = styled.div`\r\n    font-weight: 400;\r\n    color: #606060;\r\n    font-size: 13px;\r\n    margin-top: 8px;\r\n    color: #ddd;\r\n`\r\n\r\nconst Info = styled(InfoOutlinedIcon)`\r\n    margin-left: 10px;\r\n`\r\n\r\nconst Header = styled.div`\r\n    padding-left: 20px;\r\n    padding-right: 20px;\r\n    display: flex;\r\n    align-items: center;\r\n    border-bottom: 1px solid rgba(83, 39, 83,0.3);\r\n    justify-content: space-between;\r\n    color: #ddd;\r\n`\r\n\r\nconst MessageContainer = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\noverflow-y: scroll;\r\n`\r\n","D:\\react-challenge-slack-clone\\src\\components\\Sidebar.js",[],"D:\\react-challenge-slack-clone\\src\\components\\ChatInput.js",["61"],"import React, {useState} from 'react';\r\nimport styled from 'styled-components';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport FormatBoldIcon from '@material-ui/icons/FormatBold';\r\nimport FormatItalicTwoToneIcon from '@material-ui/icons/FormatItalicTwoTone';\r\nimport StrikethroughSTwoToneIcon from '@material-ui/icons/StrikethroughSTwoTone';\r\nimport CodeIcon from '@material-ui/icons/Code';\r\nimport LinkIcon from '@material-ui/icons/Link';\r\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\r\nimport FontDownloadIcon from '@material-ui/icons/FontDownload';\r\nimport AlternateEmailIcon from '@material-ui/icons/AlternateEmail';\r\nimport EmojiEmotionsOutlinedIcon from '@material-ui/icons/EmojiEmotionsOutlined';\r\nimport AttachFileOutlinedIcon from '@material-ui/icons/AttachFileOutlined';\r\nimport {Button} from '@material-ui/core';\r\n\r\nfunction ChatInput({ sendMessage }) {\r\n    const [input, setInput] = useState(\"\");\r\n    const send = (e) => {\r\n        e.preventDefault();\r\n        if(!input) return;\r\n        sendMessage(input)\r\n    }\r\n    return (\r\n        <Container>\r\n            <InputContainer>\r\n                <form>\r\n                    <input onChange={(e) => setInput(e.target.value)} value={input} type=\"text\" placeholder=\"Message here...\"/>\r\n                    <SendButton onClick={send} type=\"submit\">\r\n                        <Send/>\r\n                       \r\n                    </SendButton>\r\n                </form>\r\n                <TextFormat>\r\n                        <Left>\r\n                            <FormatBoldIcon id=\"fBI\"/>\r\n                            <FormatItalicTwoToneIcon id=\"fiI\"/>\r\n                            <StrikethroughSTwoToneIcon id=\"stI\"/>\r\n                            <CodeIcon id=\"cI\"/>\r\n                            <LinkIcon/>\r\n                            <FormatListBulletedIcon/>\r\n                        </Left>\r\n                       \r\n                        <Right>\r\n                            <FontDownloadIcon/>\r\n                            <AlternateEmailIcon/>\r\n                            <EmojiEmotionsOutlinedIcon/>\r\n                            <AttachFileOutlinedIcon/>\r\n                        </Right>\r\n                </TextFormat>\r\n            </InputContainer>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ChatInput\r\n\r\nconst Container = styled.div`\r\n::-webkit-scrollbar-track {\r\n    box-shadow: inset 0 0 5px grey; \r\n    border-radius: 10px;\r\n  }\r\n   \r\n    padding: 0 20px;\r\n    padding-bottom: 24px;\r\n    #lightBtn, darkBtn {\r\n        margin: 0 1rem;\r\n    }\r\n  #darkBtn {\r\n      background: #333;\r\n      color: #f4f4f4\r\n  }\r\n  #lightBtn  {\r\n      background: #f4f4f4;\r\n      color: #333;\r\n  }\r\n   \r\n`;\r\n\r\nconst InputContainer = styled.div`\r\n    border: 1px solid #8D8D8E;\r\n    form {\r\n        display:flex;\r\n        height: 42px;\r\n        align-items: center;\r\n        padding-left: 10px;;\r\n        input {\r\n            flex: 1;\r\n            border: none;\r\n            font-size: 13px;\r\n            background: rgba(0, 0, 0, 0);\r\n            color: #f4f4f4;\r\n            \r\n        }\r\n        input:focus {\r\n            outline:none\r\n        }\r\n    }\r\n`;\r\nconst SendButton = styled.button`\r\nbackground: #007a5a;\r\nborder-radius: 2px;\r\nwidth: 32px;\r\nheight: 32px;\r\ndisplay: flex;\r\nalign-items: center;\r\njustify-content: center;\r\nmargin-right: 5px;\r\ncursor: pointer;\r\nborder: none;\r\n.MuiSvgIcon-root {\r\n    width: 18px;\r\n}\r\n\r\n`;\r\n\r\nconst Send = styled(SendIcon)`\r\n    color: #D9D9D9;\r\n`;\r\n\r\nconst TextFormat = styled.div`\r\nheight: 40px;\r\nborder-top: 1px solid #8D8D8E;\r\ndisplay: flex;\r\njustify-content: space-between;\r\nalign-items: center;\r\n`;\r\n\r\nconst Left = styled.div`\r\n    font-weight: 400;\r\n    color: white;\r\n`;\r\n\r\nconst Right = styled.div`\r\nfont-weight: 400;\r\ncolor: white;\r\n`;","D:\\react-challenge-slack-clone\\src\\components\\ChatMessage.js",[],"D:\\react-challenge-slack-clone\\src\\data\\SidebarData.js",[],"D:\\react-challenge-slack-clone\\src\\components\\DarkMode.js",["62"],"import DarkModeToggle from \"react-dark-mode-toggle\";\r\nimport styled from 'styled-components';\r\nimport {useState} from 'react';\r\n\r\n\r\nexport const toogleState = (colorMode) => {\r\n    let mode = colorMode;\r\n    return mode;\r\n}\r\nexport const ToggleDark = () => {\r\n    const [isDarkMode, setIsDarkMode] = useState(() => true);\r\n    toogleState(isDarkMode);\r\n    return (\r\n      <DarkModeToggle\r\n        onChange={setIsDarkMode}\r\n        checked={isDarkMode}\r\n        size={80}\r\n      />\r\n    );\r\n    \r\n  };\r\n\r\n  \r\n  \r\n",{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":10,"column":16,"nodeType":"69","messageId":"70","endLine":10,"endColumn":24},{"ruleId":"67","severity":1,"message":"71","line":3,"column":9,"nodeType":"69","messageId":"70","endLine":3,"endColumn":15},{"ruleId":"67","severity":1,"message":"72","line":4,"column":9,"nodeType":"69","messageId":"70","endLine":4,"endColumn":13},{"ruleId":"73","severity":1,"message":"74","line":56,"column":4,"nodeType":"75","endLine":56,"endColumn":15,"suggestions":"76"},{"ruleId":"67","severity":1,"message":"71","line":14,"column":9,"nodeType":"69","messageId":"70","endLine":14,"endColumn":15},{"ruleId":"67","severity":1,"message":"77","line":2,"column":8,"nodeType":"69","messageId":"70","endLine":2,"endColumn":14},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'provider' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getChannel' and 'getMessages'. Either include them or remove the dependency array.","ArrayExpression",["80"],"'styled' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},"Update the dependencies array to be: [channelId, getChannel, getMessages]",{"range":"83","text":"84"},[1581,1592],"[channelId, getChannel, getMessages]"]