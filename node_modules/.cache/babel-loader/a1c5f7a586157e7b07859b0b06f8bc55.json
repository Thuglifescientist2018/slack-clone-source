{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-challenge-slack-clone\\\\src\\\\components\\\\DarkMode.js\",\n    _s = $RefreshSig$();\n\nimport DarkModeToggle from \"react-dark-mode-toggle\";\nimport styled from 'styled-components';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Toogle(colorMode) {\n  let mode = colorMode;\n  console.log(\"mode right Now\", mode);\n}\n\n_c = Toogle;\nexport const ToggleDark = () => {\n  _s();\n\n  const [isDarkMode, setIsDarkMode] = useState(() => true);\n  Toggle(isDarkMode);\n  return /*#__PURE__*/_jsxDEV(DarkModeToggle, {\n    onChange: setIsDarkMode,\n    checked: isDarkMode,\n    size: 80\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 7\n  }, this);\n};\n\n_s(ToggleDark, \"M/aYpc0ZP6Y+JqUXLJ0Wm1IxYkU=\");\n\n_c2 = ToggleDark;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Toogle\");\n$RefreshReg$(_c2, \"ToggleDark\");","map":{"version":3,"sources":["D:/react-challenge-slack-clone/src/components/DarkMode.js"],"names":["DarkModeToggle","styled","useState","Toogle","colorMode","mode","console","log","ToggleDark","isDarkMode","setIsDarkMode","Toggle"],"mappings":";;;AAAA,OAAOA,cAAP,MAA2B,wBAA3B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAQC,QAAR,QAAuB,OAAvB;;;AAGA,SAASC,MAAT,CAAgBC,SAAhB,EAA2B;AACvB,MAAIC,IAAI,GAAGD,SAAX;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,IAA9B;AACH;;KAHQF,M;AAIT,OAAO,MAAMK,UAAU,GAAG,MAAM;AAAA;;AAC5B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,MAAM,IAAP,CAA5C;AACAS,EAAAA,MAAM,CAACF,UAAD,CAAN;AACA,sBACE,QAAC,cAAD;AACE,IAAA,QAAQ,EAAEC,aADZ;AAEE,IAAA,OAAO,EAAED,UAFX;AAGE,IAAA,IAAI,EAAE;AAHR;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAXI;;GAAMD,U;;MAAAA,U","sourcesContent":["import DarkModeToggle from \"react-dark-mode-toggle\";\r\nimport styled from 'styled-components';\r\nimport {useState} from 'react';\r\n\r\n\r\nfunction Toogle(colorMode) {\r\n    let mode = colorMode;\r\n    console.log(\"mode right Now\", mode)\r\n}\r\nexport const ToggleDark = () => {\r\n    const [isDarkMode, setIsDarkMode] = useState(() => true);\r\n    Toggle(isDarkMode);\r\n    return (\r\n      <DarkModeToggle\r\n        onChange={setIsDarkMode}\r\n        checked={isDarkMode}\r\n        size={80}\r\n      />\r\n    );\r\n    \r\n  };\r\n\r\n  \r\n"]},"metadata":{},"sourceType":"module"}